/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
	"time"
)

// ShipmentjsonldRead Shipment entity
type ShipmentjsonldRead struct {
	JsonContext *string `json:"json_context,omitempty"`
	JsonId *string `json:"json_id,omitempty"`
	JsonType *string `json:"json_type,omitempty"`
	// The shipment carrier ID
	CarrierId *int32 `json:"carrierId,omitempty"`
	// The shipment ID
	Id *int32 `json:"id,omitempty"`
	// The sale ID
	SaleId int32 `json:"saleId"`
	// The shipment date
	ShippedAt CustomTime `json:"shippedAt"`
	// The shipment tracking codes
	TrackingCodes *[]string `json:"trackingCodes,omitempty"`
}

// NewShipmentjsonldRead instantiates a new ShipmentjsonldRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentjsonldRead(saleId int32, shippedAt time.Time, ) *ShipmentjsonldRead {
	this := ShipmentjsonldRead{}
	this.SaleId = saleId
	this.ShippedAt = CustomTime{shippedAt}
	return &this
}

// NewShipmentjsonldReadWithDefaults instantiates a new ShipmentjsonldRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentjsonldReadWithDefaults() *ShipmentjsonldRead {
	this := ShipmentjsonldRead{}
	return &this
}

// GetJsonContext returns the JsonContext field value if set, zero value otherwise.
func (o *ShipmentjsonldRead) GetJsonContext() string {
	if o == nil || o.JsonContext == nil {
		var ret string
		return ret
	}
	return *o.JsonContext
}

// GetJsonContextOk returns a tuple with the JsonContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetJsonContextOk() (*string, bool) {
	if o == nil || o.JsonContext == nil {
		return nil, false
	}
	return o.JsonContext, true
}

// HasJsonContext returns a boolean if a field has been set.
func (o *ShipmentjsonldRead) HasJsonContext() bool {
	if o != nil && o.JsonContext != nil {
		return true
	}

	return false
}

// SetJsonContext gets a reference to the given string and assigns it to the JsonContext field.
func (o *ShipmentjsonldRead) SetJsonContext(v string) {
	o.JsonContext = &v
}

// GetJsonId returns the JsonId field value if set, zero value otherwise.
func (o *ShipmentjsonldRead) GetJsonId() string {
	if o == nil || o.JsonId == nil {
		var ret string
		return ret
	}
	return *o.JsonId
}

// GetJsonIdOk returns a tuple with the JsonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetJsonIdOk() (*string, bool) {
	if o == nil || o.JsonId == nil {
		return nil, false
	}
	return o.JsonId, true
}

// HasJsonId returns a boolean if a field has been set.
func (o *ShipmentjsonldRead) HasJsonId() bool {
	if o != nil && o.JsonId != nil {
		return true
	}

	return false
}

// SetJsonId gets a reference to the given string and assigns it to the JsonId field.
func (o *ShipmentjsonldRead) SetJsonId(v string) {
	o.JsonId = &v
}

// GetJsonType returns the JsonType field value if set, zero value otherwise.
func (o *ShipmentjsonldRead) GetJsonType() string {
	if o == nil || o.JsonType == nil {
		var ret string
		return ret
	}
	return *o.JsonType
}

// GetJsonTypeOk returns a tuple with the JsonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetJsonTypeOk() (*string, bool) {
	if o == nil || o.JsonType == nil {
		return nil, false
	}
	return o.JsonType, true
}

// HasJsonType returns a boolean if a field has been set.
func (o *ShipmentjsonldRead) HasJsonType() bool {
	if o != nil && o.JsonType != nil {
		return true
	}

	return false
}

// SetJsonType gets a reference to the given string and assigns it to the JsonType field.
func (o *ShipmentjsonldRead) SetJsonType(v string) {
	o.JsonType = &v
}

// GetCarrierId returns the CarrierId field value if set, zero value otherwise.
func (o *ShipmentjsonldRead) GetCarrierId() int32 {
	if o == nil || o.CarrierId == nil {
		var ret int32
		return ret
	}
	return *o.CarrierId
}

// GetCarrierIdOk returns a tuple with the CarrierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetCarrierIdOk() (*int32, bool) {
	if o == nil || o.CarrierId == nil {
		return nil, false
	}
	return o.CarrierId, true
}

// HasCarrierId returns a boolean if a field has been set.
func (o *ShipmentjsonldRead) HasCarrierId() bool {
	if o != nil && o.CarrierId != nil {
		return true
	}

	return false
}

// SetCarrierId gets a reference to the given int32 and assigns it to the CarrierId field.
func (o *ShipmentjsonldRead) SetCarrierId(v int32) {
	o.CarrierId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ShipmentjsonldRead) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ShipmentjsonldRead) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ShipmentjsonldRead) SetId(v int32) {
	o.Id = &v
}

// GetSaleId returns the SaleId field value
func (o *ShipmentjsonldRead) GetSaleId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SaleId
}

// GetSaleIdOk returns a tuple with the SaleId field value
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetSaleIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SaleId, true
}

// SetSaleId sets field value
func (o *ShipmentjsonldRead) SetSaleId(v int32) {
	o.SaleId = v
}

// GetShippedAt returns the ShippedAt field value
func (o *ShipmentjsonldRead) GetShippedAt() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.ShippedAt.Time
}

// GetShippedAtOk returns a tuple with the ShippedAt field value
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetShippedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShippedAt.Time, true
}

// SetShippedAt sets field value
func (o *ShipmentjsonldRead) SetShippedAt(v time.Time) {
	o.ShippedAt = CustomTime{v}
}

// GetTrackingCodes returns the TrackingCodes field value if set, zero value otherwise.
func (o *ShipmentjsonldRead) GetTrackingCodes() []string {
	if o == nil || o.TrackingCodes == nil {
		var ret []string
		return ret
	}
	return *o.TrackingCodes
}

// GetTrackingCodesOk returns a tuple with the TrackingCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentjsonldRead) GetTrackingCodesOk() (*[]string, bool) {
	if o == nil || o.TrackingCodes == nil {
		return nil, false
	}
	return o.TrackingCodes, true
}

// HasTrackingCodes returns a boolean if a field has been set.
func (o *ShipmentjsonldRead) HasTrackingCodes() bool {
	if o != nil && o.TrackingCodes != nil {
		return true
	}

	return false
}

// SetTrackingCodes gets a reference to the given []string and assigns it to the TrackingCodes field.
func (o *ShipmentjsonldRead) SetTrackingCodes(v []string) {
	o.TrackingCodes = &v
}

func (o ShipmentjsonldRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JsonContext != nil {
		toSerialize["json_context"] = o.JsonContext
	}
	if o.JsonId != nil {
		toSerialize["json_id"] = o.JsonId
	}
	if o.JsonType != nil {
		toSerialize["json_type"] = o.JsonType
	}
	if o.CarrierId != nil {
		toSerialize["carrierId"] = o.CarrierId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["saleId"] = o.SaleId
	}
	if true {
		toSerialize["shippedAt"] = o.ShippedAt
	}
	if o.TrackingCodes != nil {
		toSerialize["trackingCodes"] = o.TrackingCodes
	}
	return json.Marshal(toSerialize)
}

type NullableShipmentjsonldRead struct {
	value *ShipmentjsonldRead
	isSet bool
}

func (v NullableShipmentjsonldRead) Get() *ShipmentjsonldRead {
	return v.value
}

func (v *NullableShipmentjsonldRead) Set(val *ShipmentjsonldRead) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentjsonldRead) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentjsonldRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentjsonldRead(val *ShipmentjsonldRead) *NullableShipmentjsonldRead {
	return &NullableShipmentjsonldRead{value: val, isSet: true}
}

func (v NullableShipmentjsonldRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentjsonldRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


