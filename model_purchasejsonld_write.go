/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
	"time"
)

// PurchasejsonldWrite Purchase entity
type PurchasejsonldWrite struct {
	JsonContext *string `json:"json_context,omitempty"`
	JsonId *string `json:"json_id,omitempty"`
	JsonType *string `json:"json_type,omitempty"`
	// The purchase channel reference (DEPRECATED)
	ChannelReference *string `json:"channelReference,omitempty"`
	// The purchase planned delivery date
	PlannedDate time.Time `json:"plannedDate"`
	// Your purchase reference (This could be your purchase ID)
	Reference *string `json:"reference,omitempty"`
	// The purchase supplier ID
	SupplierId int32 `json:"supplierId"`
}

// NewPurchasejsonldWrite instantiates a new PurchasejsonldWrite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchasejsonldWrite(plannedDate time.Time, supplierId int32, ) *PurchasejsonldWrite {
	this := PurchasejsonldWrite{}
	this.PlannedDate = plannedDate
	this.SupplierId = supplierId
	return &this
}

// NewPurchasejsonldWriteWithDefaults instantiates a new PurchasejsonldWrite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchasejsonldWriteWithDefaults() *PurchasejsonldWrite {
	this := PurchasejsonldWrite{}
	return &this
}

// GetJsonContext returns the JsonContext field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetJsonContext() string {
	if o == nil || o.JsonContext == nil {
		var ret string
		return ret
	}
	return *o.JsonContext
}

// GetJsonContextOk returns a tuple with the JsonContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetJsonContextOk() (*string, bool) {
	if o == nil || o.JsonContext == nil {
		return nil, false
	}
	return o.JsonContext, true
}

// HasJsonContext returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasJsonContext() bool {
	if o != nil && o.JsonContext != nil {
		return true
	}

	return false
}

// SetJsonContext gets a reference to the given string and assigns it to the JsonContext field.
func (o *PurchasejsonldWrite) SetJsonContext(v string) {
	o.JsonContext = &v
}

// GetJsonId returns the JsonId field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetJsonId() string {
	if o == nil || o.JsonId == nil {
		var ret string
		return ret
	}
	return *o.JsonId
}

// GetJsonIdOk returns a tuple with the JsonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetJsonIdOk() (*string, bool) {
	if o == nil || o.JsonId == nil {
		return nil, false
	}
	return o.JsonId, true
}

// HasJsonId returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasJsonId() bool {
	if o != nil && o.JsonId != nil {
		return true
	}

	return false
}

// SetJsonId gets a reference to the given string and assigns it to the JsonId field.
func (o *PurchasejsonldWrite) SetJsonId(v string) {
	o.JsonId = &v
}

// GetJsonType returns the JsonType field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetJsonType() string {
	if o == nil || o.JsonType == nil {
		var ret string
		return ret
	}
	return *o.JsonType
}

// GetJsonTypeOk returns a tuple with the JsonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetJsonTypeOk() (*string, bool) {
	if o == nil || o.JsonType == nil {
		return nil, false
	}
	return o.JsonType, true
}

// HasJsonType returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasJsonType() bool {
	if o != nil && o.JsonType != nil {
		return true
	}

	return false
}

// SetJsonType gets a reference to the given string and assigns it to the JsonType field.
func (o *PurchasejsonldWrite) SetJsonType(v string) {
	o.JsonType = &v
}

// GetChannelReference returns the ChannelReference field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetChannelReference() string {
	if o == nil || o.ChannelReference == nil {
		var ret string
		return ret
	}
	return *o.ChannelReference
}

// GetChannelReferenceOk returns a tuple with the ChannelReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetChannelReferenceOk() (*string, bool) {
	if o == nil || o.ChannelReference == nil {
		return nil, false
	}
	return o.ChannelReference, true
}

// HasChannelReference returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasChannelReference() bool {
	if o != nil && o.ChannelReference != nil {
		return true
	}

	return false
}

// SetChannelReference gets a reference to the given string and assigns it to the ChannelReference field.
func (o *PurchasejsonldWrite) SetChannelReference(v string) {
	o.ChannelReference = &v
}

// GetPlannedDate returns the PlannedDate field value
func (o *PurchasejsonldWrite) GetPlannedDate() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlannedDate
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetPlannedDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlannedDate, true
}

// SetPlannedDate sets field value
func (o *PurchasejsonldWrite) SetPlannedDate(v time.Time) {
	o.PlannedDate = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *PurchasejsonldWrite) SetReference(v string) {
	o.Reference = &v
}

// GetSupplierId returns the SupplierId field value
func (o *PurchasejsonldWrite) GetSupplierId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SupplierId
}

// GetSupplierIdOk returns a tuple with the SupplierId field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetSupplierIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupplierId, true
}

// SetSupplierId sets field value
func (o *PurchasejsonldWrite) SetSupplierId(v int32) {
	o.SupplierId = v
}

func (o PurchasejsonldWrite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JsonContext != nil {
		toSerialize["json_context"] = o.JsonContext
	}
	if o.JsonId != nil {
		toSerialize["json_id"] = o.JsonId
	}
	if o.JsonType != nil {
		toSerialize["json_type"] = o.JsonType
	}
	if o.ChannelReference != nil {
		toSerialize["channelReference"] = o.ChannelReference
	}
	if true {
		toSerialize["plannedDate"] = o.PlannedDate
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["supplierId"] = o.SupplierId
	}
	return json.Marshal(toSerialize)
}

type NullablePurchasejsonldWrite struct {
	value *PurchasejsonldWrite
	isSet bool
}

func (v NullablePurchasejsonldWrite) Get() *PurchasejsonldWrite {
	return v.value
}

func (v *NullablePurchasejsonldWrite) Set(val *PurchasejsonldWrite) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasejsonldWrite) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasejsonldWrite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasejsonldWrite(val *PurchasejsonldWrite) *NullablePurchasejsonldWrite {
	return &NullablePurchasejsonldWrite{value: val, isSet: true}
}

func (v NullablePurchasejsonldWrite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchasejsonldWrite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


