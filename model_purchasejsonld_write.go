/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
	"time"
)

// PurchasejsonldWrite Purchase entity
type PurchasejsonldWrite struct {
	JSONContext *string `json:"@context,omitempty"`
	JSONId      *string `json:"@id,omitempty"`
	JSONType        *string `json:"@type,omitempty"`
	// The purchase channel
	ChannelId int32 `json:"channelId"`
	// The purchase channel reference
	ChannelReference string `json:"channelReference"`
	// The purchase planned delivery date
	PlannedDate time.Time `json:"plannedDate"`
	// The purchase supplier ID
	SupplierId int32 `json:"supplierId"`
}

// NewPurchasejsonldWrite instantiates a new PurchasejsonldWrite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchasejsonldWrite(channelId int32, channelReference string, plannedDate time.Time, supplierId int32, ) *PurchasejsonldWrite {
	this := PurchasejsonldWrite{}
	this.ChannelId = channelId
	this.ChannelReference = channelReference
	this.PlannedDate = plannedDate
	this.SupplierId = supplierId
	return &this
}

// NewPurchasejsonldWriteWithDefaults instantiates a new PurchasejsonldWrite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchasejsonldWriteWithDefaults() *PurchasejsonldWrite {
	this := PurchasejsonldWrite{}
	return &this
}

// GetJSONContext returns the JSONContext field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetJSONContext() string {
	if o == nil || o.JSONContext == nil {
		var ret string
		return ret
	}
	return *o.JSONContext
}

// GetJSONContextOk returns a tuple with the JSONContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetJSONContextOk() (*string, bool) {
	if o == nil || o.JSONContext == nil {
		return nil, false
	}
	return o.JSONContext, true
}

// HasJSONContext returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasJSONContext() bool {
	if o != nil && o.JSONContext != nil {
		return true
	}

	return false
}

// SetJSONContext gets a reference to the given string and assigns it to the JSONContext field.
func (o *PurchasejsonldWrite) SetJSONContext(v string) {
	o.JSONContext = &v
}

// GetJSONId returns the JSONId field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetJSONId() string {
	if o == nil || o.JSONId == nil {
		var ret string
		return ret
	}
	return *o.JSONId
}

// GetIdOk returns a tuple with the JSONId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetIdOk() (*string, bool) {
	if o == nil || o.JSONId == nil {
		return nil, false
	}
	return o.JSONId, true
}

// HasJSONId returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasJSONId() bool {
	if o != nil && o.JSONId != nil {
		return true
	}

	return false
}

// SetJSONId gets a reference to the given string and assigns it to the JSONId field.
func (o *PurchasejsonldWrite) SetJSONId(v string) {
	o.JSONId = &v
}

// GetJSONType returns the JSONType field value if set, zero value otherwise.
func (o *PurchasejsonldWrite) GetJSONType() string {
	if o == nil || o.JSONType == nil {
		var ret string
		return ret
	}
	return *o.JSONType
}

// GetJSONTypeOk returns a tuple with the JSONType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetJSONTypeOk() (*string, bool) {
	if o == nil || o.JSONType == nil {
		return nil, false
	}
	return o.JSONType, true
}

// HasJSONType returns a boolean if a field has been set.
func (o *PurchasejsonldWrite) HasJSONType() bool {
	if o != nil && o.JSONType != nil {
		return true
	}

	return false
}

// SetJSONType gets a reference to the given string and assigns it to the JSONType field.
func (o *PurchasejsonldWrite) SetJSONType(v string) {
	o.JSONType = &v
}

// GetChannelId returns the ChannelId field value
func (o *PurchasejsonldWrite) GetChannelId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetChannelIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *PurchasejsonldWrite) SetChannelId(v int32) {
	o.ChannelId = v
}

// GetChannelReference returns the ChannelReference field value
func (o *PurchasejsonldWrite) GetChannelReference() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ChannelReference
}

// GetChannelReferenceOk returns a tuple with the ChannelReference field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetChannelReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelReference, true
}

// SetChannelReference sets field value
func (o *PurchasejsonldWrite) SetChannelReference(v string) {
	o.ChannelReference = v
}

// GetPlannedDate returns the PlannedDate field value
func (o *PurchasejsonldWrite) GetPlannedDate() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlannedDate
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetPlannedDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlannedDate, true
}

// SetPlannedDate sets field value
func (o *PurchasejsonldWrite) SetPlannedDate(v time.Time) {
	o.PlannedDate = v
}

// GetSupplierId returns the SupplierId field value
func (o *PurchasejsonldWrite) GetSupplierId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SupplierId
}

// GetSupplierIdOk returns a tuple with the SupplierId field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldWrite) GetSupplierIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupplierId, true
}

// SetSupplierId sets field value
func (o *PurchasejsonldWrite) SetSupplierId(v int32) {
	o.SupplierId = v
}

func (o PurchasejsonldWrite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JSONContext != nil {
		toSerialize["@context"] = o.JSONContext
	}
	if o.JSONId != nil {
		toSerialize["@id"] = o.JSONId
	}
	if o.JSONType != nil {
		toSerialize["@type"] = o.JSONType
	}
	if true {
		toSerialize["channelId"] = o.ChannelId
	}
	if true {
		toSerialize["channelReference"] = o.ChannelReference
	}
	if true {
		toSerialize["plannedDate"] = o.PlannedDate
	}
	if true {
		toSerialize["supplierId"] = o.SupplierId
	}
	return json.Marshal(toSerialize)
}

type NullablePurchasejsonldWrite struct {
	value *PurchasejsonldWrite
	isSet bool
}

func (v NullablePurchasejsonldWrite) Get() *PurchasejsonldWrite {
	return v.value
}

func (v *NullablePurchasejsonldWrite) Set(val *PurchasejsonldWrite) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasejsonldWrite) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasejsonldWrite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasejsonldWrite(val *PurchasejsonldWrite) *NullablePurchasejsonldWrite {
	return &NullablePurchasejsonldWrite{value: val, isSet: true}
}

func (v NullablePurchasejsonldWrite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchasejsonldWrite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


