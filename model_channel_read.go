/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
)

// ChannelRead Channel entity
type ChannelRead struct {
	// The channel ID
	Id *int32 `json:"id,omitempty"`
	// The channel name
	Name *string `json:"name,omitempty"`
}

// NewChannelRead instantiates a new ChannelRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelRead() *ChannelRead {
	this := ChannelRead{}
	return &this
}

// NewChannelReadWithDefaults instantiates a new ChannelRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelReadWithDefaults() *ChannelRead {
	this := ChannelRead{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelRead) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelRead) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelRead) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ChannelRead) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChannelRead) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelRead) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChannelRead) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChannelRead) SetName(v string) {
	o.Name = &v
}

func (o ChannelRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableChannelRead struct {
	value *ChannelRead
	isSet bool
}

func (v NullableChannelRead) Get() *ChannelRead {
	return v.value
}

func (v *NullableChannelRead) Set(val *ChannelRead) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelRead) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelRead(val *ChannelRead) *NullableChannelRead {
	return &NullableChannelRead{value: val, isSet: true}
}

func (v NullableChannelRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


