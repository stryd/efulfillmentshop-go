/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfillment_go

import (
	"encoding/json"
	"time"
)

// PurchaseRead Purchase entity
type PurchaseRead struct {
	// The purchase channel
	ChannelId int32 `json:"channelId"`
	// The purchase channel reference
	ChannelReference string `json:"channelReference"`
	// The purchase ID
	Id *int32 `json:"id,omitempty"`
	// The purchase name
	Name *string `json:"name,omitempty"`
	// The purchase planned delivery date
	PlannedDate time.Time `json:"plannedDate"`
	// The purchase supplier ID
	SupplierId int32 `json:"supplierId"`
}

// NewPurchaseRead instantiates a new PurchaseRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseRead(channelId int32, channelReference string, plannedDate time.Time, supplierId int32, ) *PurchaseRead {
	this := PurchaseRead{}
	this.ChannelId = channelId
	this.ChannelReference = channelReference
	this.PlannedDate = plannedDate
	this.SupplierId = supplierId
	return &this
}

// NewPurchaseReadWithDefaults instantiates a new PurchaseRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseReadWithDefaults() *PurchaseRead {
	this := PurchaseRead{}
	return &this
}

// GetChannelId returns the ChannelId field value
func (o *PurchaseRead) GetChannelId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *PurchaseRead) GetChannelIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *PurchaseRead) SetChannelId(v int32) {
	o.ChannelId = v
}

// GetChannelReference returns the ChannelReference field value
func (o *PurchaseRead) GetChannelReference() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ChannelReference
}

// GetChannelReferenceOk returns a tuple with the ChannelReference field value
// and a boolean to check if the value has been set.
func (o *PurchaseRead) GetChannelReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelReference, true
}

// SetChannelReference sets field value
func (o *PurchaseRead) SetChannelReference(v string) {
	o.ChannelReference = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PurchaseRead) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseRead) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PurchaseRead) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PurchaseRead) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PurchaseRead) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseRead) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PurchaseRead) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PurchaseRead) SetName(v string) {
	o.Name = &v
}

// GetPlannedDate returns the PlannedDate field value
func (o *PurchaseRead) GetPlannedDate() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlannedDate
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value
// and a boolean to check if the value has been set.
func (o *PurchaseRead) GetPlannedDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlannedDate, true
}

// SetPlannedDate sets field value
func (o *PurchaseRead) SetPlannedDate(v time.Time) {
	o.PlannedDate = v
}

// GetSupplierId returns the SupplierId field value
func (o *PurchaseRead) GetSupplierId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SupplierId
}

// GetSupplierIdOk returns a tuple with the SupplierId field value
// and a boolean to check if the value has been set.
func (o *PurchaseRead) GetSupplierIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupplierId, true
}

// SetSupplierId sets field value
func (o *PurchaseRead) SetSupplierId(v int32) {
	o.SupplierId = v
}

func (o PurchaseRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["channelId"] = o.ChannelId
	}
	if true {
		toSerialize["channelReference"] = o.ChannelReference
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["plannedDate"] = o.PlannedDate
	}
	if true {
		toSerialize["supplierId"] = o.SupplierId
	}
	return json.Marshal(toSerialize)
}

type NullablePurchaseRead struct {
	value *PurchaseRead
	isSet bool
}

func (v NullablePurchaseRead) Get() *PurchaseRead {
	return v.value
}

func (v *NullablePurchaseRead) Set(val *PurchaseRead) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseRead) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseRead(val *PurchaseRead) *NullablePurchaseRead {
	return &NullablePurchaseRead{value: val, isSet: true}
}

func (v NullablePurchaseRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


