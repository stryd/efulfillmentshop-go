/*
E-fulfilment Shop API

The E-fulfilment Shop API allows you to integrate your service with our warehouse.

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
)

// SaleReadLd Sale entity
type SaleReadLd struct {
	LdContext *string `json:"@context,omitempty"`
	LdId      *string `json:"@id,omitempty"`
	LdType    *string `json:"@type,omitempty"`
	// The sale carrier ID
	CarrierId *int32 `json:"carrierId,omitempty"`
	// The sale ID
	Id *int32 `json:"id,omitempty"`
	// The sale invoice address ID
	InvoiceAddressId int32 `json:"invoiceAddressId"`
	// The sale line IDs
	LineIds *[]int32 `json:"lineIds,omitempty"`
	// The sale name
	Name *string `json:"name,omitempty"`
	// The sale shipment IDs
	ShipmentIds *[]int32 `json:"shipmentIds,omitempty"`
	// The sale shipping address ID
	ShippingAddressId int32 `json:"shippingAddressId"`
	// The sale warehouse status
	Status *string `json:"status,omitempty"`
	// The sale type
	Type *string `json:"type,omitempty"`
}

// NewSaleReadLd instantiates a new SaleReadLd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaleReadLd(invoiceAddressId int32, shippingAddressId int32) *SaleReadLd {
	this := SaleReadLd{}
	this.InvoiceAddressId = invoiceAddressId
	this.ShippingAddressId = shippingAddressId
	return &this
}

// NewSaleReadLdWithDefaults instantiates a new SaleReadLd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaleReadLdWithDefaults() *SaleReadLd {
	this := SaleReadLd{}
	return &this
}

// GetLdContext returns the LdContext field value if set, zero value otherwise.
func (o *SaleReadLd) GetLdContext() string {
	if o == nil || o.LdContext == nil {
		var ret string
		return ret
	}
	return *o.LdContext
}

// GetLdContextOk returns a tuple with the LdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetLdContextOk() (*string, bool) {
	if o == nil || o.LdContext == nil {
		return nil, false
	}
	return o.LdContext, true
}

// HasLdContext returns a boolean if a field has been set.
func (o *SaleReadLd) HasLdContext() bool {
	if o != nil && o.LdContext != nil {
		return true
	}

	return false
}

// SetLdContext gets a reference to the given string and assigns it to the LdContext field.
func (o *SaleReadLd) SetLdContext(v string) {
	o.LdContext = &v
}

// GetLdId returns the LdId field value if set, zero value otherwise.
func (o *SaleReadLd) GetLdId() string {
	if o == nil || o.LdId == nil {
		var ret string
		return ret
	}
	return *o.LdId
}

// GetLdIdOk returns a tuple with the LdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetLdIdOk() (*string, bool) {
	if o == nil || o.LdId == nil {
		return nil, false
	}
	return o.LdId, true
}

// HasLdId returns a boolean if a field has been set.
func (o *SaleReadLd) HasLdId() bool {
	if o != nil && o.LdId != nil {
		return true
	}

	return false
}

// SetLdId gets a reference to the given string and assigns it to the LdId field.
func (o *SaleReadLd) SetLdId(v string) {
	o.LdId = &v
}

// GetLdType returns the LdType field value if set, zero value otherwise.
func (o *SaleReadLd) GetLdType() string {
	if o == nil || o.LdType == nil {
		var ret string
		return ret
	}
	return *o.LdType
}

// GetLdTypeOk returns a tuple with the LdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetLdTypeOk() (*string, bool) {
	if o == nil || o.LdType == nil {
		return nil, false
	}
	return o.LdType, true
}

// HasLdType returns a boolean if a field has been set.
func (o *SaleReadLd) HasLdType() bool {
	if o != nil && o.LdType != nil {
		return true
	}

	return false
}

// SetLdType gets a reference to the given string and assigns it to the LdType field.
func (o *SaleReadLd) SetLdType(v string) {
	o.LdType = &v
}

// GetCarrierId returns the CarrierId field value if set, zero value otherwise.
func (o *SaleReadLd) GetCarrierId() int32 {
	if o == nil || o.CarrierId == nil {
		var ret int32
		return ret
	}
	return *o.CarrierId
}

// GetCarrierIdOk returns a tuple with the CarrierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetCarrierIdOk() (*int32, bool) {
	if o == nil || o.CarrierId == nil {
		return nil, false
	}
	return o.CarrierId, true
}

// HasCarrierId returns a boolean if a field has been set.
func (o *SaleReadLd) HasCarrierId() bool {
	if o != nil && o.CarrierId != nil {
		return true
	}

	return false
}

// SetCarrierId gets a reference to the given int32 and assigns it to the CarrierId field.
func (o *SaleReadLd) SetCarrierId(v int32) {
	o.CarrierId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SaleReadLd) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SaleReadLd) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SaleReadLd) SetId(v int32) {
	o.Id = &v
}

// GetInvoiceAddressId returns the InvoiceAddressId field value
func (o *SaleReadLd) GetInvoiceAddressId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InvoiceAddressId
}

// GetInvoiceAddressIdOk returns a tuple with the InvoiceAddressId field value
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetInvoiceAddressIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceAddressId, true
}

// SetInvoiceAddressId sets field value
func (o *SaleReadLd) SetInvoiceAddressId(v int32) {
	o.InvoiceAddressId = v
}

// GetLineIds returns the LineIds field value if set, zero value otherwise.
func (o *SaleReadLd) GetLineIds() []int32 {
	if o == nil || o.LineIds == nil {
		var ret []int32
		return ret
	}
	return *o.LineIds
}

// GetLineIdsOk returns a tuple with the LineIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetLineIdsOk() (*[]int32, bool) {
	if o == nil || o.LineIds == nil {
		return nil, false
	}
	return o.LineIds, true
}

// HasLineIds returns a boolean if a field has been set.
func (o *SaleReadLd) HasLineIds() bool {
	if o != nil && o.LineIds != nil {
		return true
	}

	return false
}

// SetLineIds gets a reference to the given []int32 and assigns it to the LineIds field.
func (o *SaleReadLd) SetLineIds(v []int32) {
	o.LineIds = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SaleReadLd) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SaleReadLd) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SaleReadLd) SetName(v string) {
	o.Name = &v
}

// GetShipmentIds returns the ShipmentIds field value if set, zero value otherwise.
func (o *SaleReadLd) GetShipmentIds() []int32 {
	if o == nil || o.ShipmentIds == nil {
		var ret []int32
		return ret
	}
	return *o.ShipmentIds
}

// GetShipmentIdsOk returns a tuple with the ShipmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetShipmentIdsOk() (*[]int32, bool) {
	if o == nil || o.ShipmentIds == nil {
		return nil, false
	}
	return o.ShipmentIds, true
}

// HasShipmentIds returns a boolean if a field has been set.
func (o *SaleReadLd) HasShipmentIds() bool {
	if o != nil && o.ShipmentIds != nil {
		return true
	}

	return false
}

// SetShipmentIds gets a reference to the given []int32 and assigns it to the ShipmentIds field.
func (o *SaleReadLd) SetShipmentIds(v []int32) {
	o.ShipmentIds = &v
}

// GetShippingAddressId returns the ShippingAddressId field value
func (o *SaleReadLd) GetShippingAddressId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ShippingAddressId
}

// GetShippingAddressIdOk returns a tuple with the ShippingAddressId field value
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetShippingAddressIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShippingAddressId, true
}

// SetShippingAddressId sets field value
func (o *SaleReadLd) SetShippingAddressId(v int32) {
	o.ShippingAddressId = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SaleReadLd) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SaleReadLd) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SaleReadLd) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SaleReadLd) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleReadLd) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SaleReadLd) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SaleReadLd) SetType(v string) {
	o.Type = &v
}

func (o SaleReadLd) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LdContext != nil {
		toSerialize["ld-context"] = o.LdContext
	}
	if o.LdId != nil {
		toSerialize["ld-id"] = o.LdId
	}
	if o.LdType != nil {
		toSerialize["ld-type"] = o.LdType
	}
	if o.CarrierId != nil {
		toSerialize["carrierId"] = o.CarrierId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["invoiceAddressId"] = o.InvoiceAddressId
	}
	if o.LineIds != nil {
		toSerialize["lineIds"] = o.LineIds
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ShipmentIds != nil {
		toSerialize["shipmentIds"] = o.ShipmentIds
	}
	if true {
		toSerialize["shippingAddressId"] = o.ShippingAddressId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSaleReadLd struct {
	value *SaleReadLd
	isSet bool
}

func (v NullableSaleReadLd) Get() *SaleReadLd {
	return v.value
}

func (v *NullableSaleReadLd) Set(val *SaleReadLd) {
	v.value = val
	v.isSet = true
}

func (v NullableSaleReadLd) IsSet() bool {
	return v.isSet
}

func (v *NullableSaleReadLd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaleReadLd(val *SaleReadLd) *NullableSaleReadLd {
	return &NullableSaleReadLd{value: val, isSet: true}
}

func (v NullableSaleReadLd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaleReadLd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
