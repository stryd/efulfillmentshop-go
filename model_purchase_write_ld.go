/*
E-fulfilment Shop API

The E-fulfilment Shop API allows you to integrate your service with our warehouse.

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
	"time"
)

// PurchaseWriteLd Purchase entity
type PurchaseWriteLd struct {
	LdContext *string `json:"@context,omitempty"`
	LdId      *string `json:"@id,omitempty"`
	LdType    *string `json:"@type,omitempty"`
	// The purchase channel reference (DEPRECATED)
	ChannelReference *string `json:"channelReference,omitempty"`
	// The purchase planned delivery date
	PlannedDate CustomTime `json:"plannedDate"`
	// Your purchase reference (This could be your purchase ID)
	Reference *string `json:"reference,omitempty"`
	// The purchase supplier ID
	SupplierId int32 `json:"supplierId"`
}

// NewPurchaseWriteLd instantiates a new PurchaseWriteLd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseWriteLd(plannedDate time.Time, supplierId int32) *PurchaseWriteLd {
	this := PurchaseWriteLd{}
	this.PlannedDate = CustomTime{plannedDate}
	this.SupplierId = supplierId
	return &this
}

// NewPurchaseWriteLdWithDefaults instantiates a new PurchaseWriteLd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseWriteLdWithDefaults() *PurchaseWriteLd {
	this := PurchaseWriteLd{}
	return &this
}

// GetLdContext returns the LdContext field value if set, zero value otherwise.
func (o *PurchaseWriteLd) GetLdContext() string {
	if o == nil || o.LdContext == nil {
		var ret string
		return ret
	}
	return *o.LdContext
}

// GetLdContextOk returns a tuple with the LdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetLdContextOk() (*string, bool) {
	if o == nil || o.LdContext == nil {
		return nil, false
	}
	return o.LdContext, true
}

// HasLdContext returns a boolean if a field has been set.
func (o *PurchaseWriteLd) HasLdContext() bool {
	if o != nil && o.LdContext != nil {
		return true
	}

	return false
}

// SetLdContext gets a reference to the given string and assigns it to the LdContext field.
func (o *PurchaseWriteLd) SetLdContext(v string) {
	o.LdContext = &v
}

// GetLdId returns the LdId field value if set, zero value otherwise.
func (o *PurchaseWriteLd) GetLdId() string {
	if o == nil || o.LdId == nil {
		var ret string
		return ret
	}
	return *o.LdId
}

// GetLdIdOk returns a tuple with the LdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetLdIdOk() (*string, bool) {
	if o == nil || o.LdId == nil {
		return nil, false
	}
	return o.LdId, true
}

// HasLdId returns a boolean if a field has been set.
func (o *PurchaseWriteLd) HasLdId() bool {
	if o != nil && o.LdId != nil {
		return true
	}

	return false
}

// SetLdId gets a reference to the given string and assigns it to the LdId field.
func (o *PurchaseWriteLd) SetLdId(v string) {
	o.LdId = &v
}

// GetLdType returns the LdType field value if set, zero value otherwise.
func (o *PurchaseWriteLd) GetLdType() string {
	if o == nil || o.LdType == nil {
		var ret string
		return ret
	}
	return *o.LdType
}

// GetLdTypeOk returns a tuple with the LdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetLdTypeOk() (*string, bool) {
	if o == nil || o.LdType == nil {
		return nil, false
	}
	return o.LdType, true
}

// HasLdType returns a boolean if a field has been set.
func (o *PurchaseWriteLd) HasLdType() bool {
	if o != nil && o.LdType != nil {
		return true
	}

	return false
}

// SetLdType gets a reference to the given string and assigns it to the LdType field.
func (o *PurchaseWriteLd) SetLdType(v string) {
	o.LdType = &v
}

// GetChannelReference returns the ChannelReference field value if set, zero value otherwise.
func (o *PurchaseWriteLd) GetChannelReference() string {
	if o == nil || o.ChannelReference == nil {
		var ret string
		return ret
	}
	return *o.ChannelReference
}

// GetChannelReferenceOk returns a tuple with the ChannelReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetChannelReferenceOk() (*string, bool) {
	if o == nil || o.ChannelReference == nil {
		return nil, false
	}
	return o.ChannelReference, true
}

// HasChannelReference returns a boolean if a field has been set.
func (o *PurchaseWriteLd) HasChannelReference() bool {
	if o != nil && o.ChannelReference != nil {
		return true
	}

	return false
}

// SetChannelReference gets a reference to the given string and assigns it to the ChannelReference field.
func (o *PurchaseWriteLd) SetChannelReference(v string) {
	o.ChannelReference = &v
}

// GetPlannedDate returns the PlannedDate field value
func (o *PurchaseWriteLd) GetPlannedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PlannedDate.Time
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetPlannedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlannedDate.Time, true
}

// SetPlannedDate sets field value
func (o *PurchaseWriteLd) SetPlannedDate(v time.Time) {
	o.PlannedDate = CustomTime{v}
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *PurchaseWriteLd) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PurchaseWriteLd) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *PurchaseWriteLd) SetReference(v string) {
	o.Reference = &v
}

// GetSupplierId returns the SupplierId field value
func (o *PurchaseWriteLd) GetSupplierId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SupplierId
}

// GetSupplierIdOk returns a tuple with the SupplierId field value
// and a boolean to check if the value has been set.
func (o *PurchaseWriteLd) GetSupplierIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupplierId, true
}

// SetSupplierId sets field value
func (o *PurchaseWriteLd) SetSupplierId(v int32) {
	o.SupplierId = v
}

func (o PurchaseWriteLd) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LdContext != nil {
		toSerialize["ld-context"] = o.LdContext
	}
	if o.LdId != nil {
		toSerialize["ld-id"] = o.LdId
	}
	if o.LdType != nil {
		toSerialize["ld-type"] = o.LdType
	}
	if o.ChannelReference != nil {
		toSerialize["channelReference"] = o.ChannelReference
	}
	if true {
		toSerialize["plannedDate"] = o.PlannedDate
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["supplierId"] = o.SupplierId
	}
	return json.Marshal(toSerialize)
}

type NullablePurchaseWriteLd struct {
	value *PurchaseWriteLd
	isSet bool
}

func (v NullablePurchaseWriteLd) Get() *PurchaseWriteLd {
	return v.value
}

func (v *NullablePurchaseWriteLd) Set(val *PurchaseWriteLd) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseWriteLd) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseWriteLd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseWriteLd(val *PurchaseWriteLd) *NullablePurchaseWriteLd {
	return &NullablePurchaseWriteLd{value: val, isSet: true}
}

func (v NullablePurchaseWriteLd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseWriteLd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
