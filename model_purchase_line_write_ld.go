/*
E-fulfilment Shop API

The E-fulfilment Shop API allows you to integrate your service with our warehouse.

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfilmentshop

import (
	"encoding/json"
	"time"
)

// PurchaseLineWriteLd Purchase Line entity
type PurchaseLineWriteLd struct {
	LdContext *string `json:"@context,omitempty"`
	LdId      *string `json:"@id,omitempty"`
	LdType    *string `json:"@type,omitempty"`
	// The purchase line description
	Description string `json:"description"`
	// The purchase line planned delivery date
	PlannedDate *CustomTime `json:"plannedDate,omitempty"`
	// The product ID
	ProductId int32 `json:"productId"`
	// The purchase ID
	PurchaseId int32 `json:"purchaseId"`
	// The purchase line quantity
	Quantity int32 `json:"quantity"`
}

// NewPurchaseLineWriteLd instantiates a new PurchaseLineWriteLd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseLineWriteLd(description string, productId int32, purchaseId int32, quantity int32) *PurchaseLineWriteLd {
	this := PurchaseLineWriteLd{}
	this.Description = description
	this.ProductId = productId
	this.PurchaseId = purchaseId
	this.Quantity = quantity
	return &this
}

// NewPurchaseLineWriteLdWithDefaults instantiates a new PurchaseLineWriteLd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseLineWriteLdWithDefaults() *PurchaseLineWriteLd {
	this := PurchaseLineWriteLd{}
	return &this
}

// GetLdContext returns the LdContext field value if set, zero value otherwise.
func (o *PurchaseLineWriteLd) GetLdContext() string {
	if o == nil || o.LdContext == nil {
		var ret string
		return ret
	}
	return *o.LdContext
}

// GetLdContextOk returns a tuple with the LdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetLdContextOk() (*string, bool) {
	if o == nil || o.LdContext == nil {
		return nil, false
	}
	return o.LdContext, true
}

// HasLdContext returns a boolean if a field has been set.
func (o *PurchaseLineWriteLd) HasLdContext() bool {
	if o != nil && o.LdContext != nil {
		return true
	}

	return false
}

// SetLdContext gets a reference to the given string and assigns it to the LdContext field.
func (o *PurchaseLineWriteLd) SetLdContext(v string) {
	o.LdContext = &v
}

// GetLdId returns the LdId field value if set, zero value otherwise.
func (o *PurchaseLineWriteLd) GetLdId() string {
	if o == nil || o.LdId == nil {
		var ret string
		return ret
	}
	return *o.LdId
}

// GetLdIdOk returns a tuple with the LdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetLdIdOk() (*string, bool) {
	if o == nil || o.LdId == nil {
		return nil, false
	}
	return o.LdId, true
}

// HasLdId returns a boolean if a field has been set.
func (o *PurchaseLineWriteLd) HasLdId() bool {
	if o != nil && o.LdId != nil {
		return true
	}

	return false
}

// SetLdId gets a reference to the given string and assigns it to the LdId field.
func (o *PurchaseLineWriteLd) SetLdId(v string) {
	o.LdId = &v
}

// GetLdType returns the LdType field value if set, zero value otherwise.
func (o *PurchaseLineWriteLd) GetLdType() string {
	if o == nil || o.LdType == nil {
		var ret string
		return ret
	}
	return *o.LdType
}

// GetLdTypeOk returns a tuple with the LdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetLdTypeOk() (*string, bool) {
	if o == nil || o.LdType == nil {
		return nil, false
	}
	return o.LdType, true
}

// HasLdType returns a boolean if a field has been set.
func (o *PurchaseLineWriteLd) HasLdType() bool {
	if o != nil && o.LdType != nil {
		return true
	}

	return false
}

// SetLdType gets a reference to the given string and assigns it to the LdType field.
func (o *PurchaseLineWriteLd) SetLdType(v string) {
	o.LdType = &v
}

// GetDescription returns the Description field value
func (o *PurchaseLineWriteLd) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PurchaseLineWriteLd) SetDescription(v string) {
	o.Description = v
}

// GetPlannedDate returns the PlannedDate field value if set, zero value otherwise.
func (o *PurchaseLineWriteLd) GetPlannedDate() time.Time {
	if o == nil || o.PlannedDate == nil {
		var ret time.Time
		return ret
	}
	return o.PlannedDate.Time
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetPlannedDateOk() (*time.Time, bool) {
	if o == nil || o.PlannedDate == nil {
		return nil, false
	}
	return &o.PlannedDate.Time, true
}

// HasPlannedDate returns a boolean if a field has been set.
func (o *PurchaseLineWriteLd) HasPlannedDate() bool {
	if o != nil && o.PlannedDate != nil {
		return true
	}

	return false
}

// SetPlannedDate gets a reference to the given time.Time and assigns it to the PlannedDate field.
func (o *PurchaseLineWriteLd) SetPlannedDate(v time.Time) {
	o.PlannedDate = &CustomTime{v}
}

// GetProductId returns the ProductId field value
func (o *PurchaseLineWriteLd) GetProductId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetProductIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *PurchaseLineWriteLd) SetProductId(v int32) {
	o.ProductId = v
}

// GetPurchaseId returns the PurchaseId field value
func (o *PurchaseLineWriteLd) GetPurchaseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PurchaseId
}

// GetPurchaseIdOk returns a tuple with the PurchaseId field value
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetPurchaseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseId, true
}

// SetPurchaseId sets field value
func (o *PurchaseLineWriteLd) SetPurchaseId(v int32) {
	o.PurchaseId = v
}

// GetQuantity returns the Quantity field value
func (o *PurchaseLineWriteLd) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *PurchaseLineWriteLd) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *PurchaseLineWriteLd) SetQuantity(v int32) {
	o.Quantity = v
}

func (o PurchaseLineWriteLd) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LdContext != nil {
		toSerialize["ld-context"] = o.LdContext
	}
	if o.LdId != nil {
		toSerialize["ld-id"] = o.LdId
	}
	if o.LdType != nil {
		toSerialize["ld-type"] = o.LdType
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.PlannedDate != nil {
		toSerialize["plannedDate"] = o.PlannedDate
	}
	if true {
		toSerialize["productId"] = o.ProductId
	}
	if true {
		toSerialize["purchaseId"] = o.PurchaseId
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullablePurchaseLineWriteLd struct {
	value *PurchaseLineWriteLd
	isSet bool
}

func (v NullablePurchaseLineWriteLd) Get() *PurchaseLineWriteLd {
	return v.value
}

func (v *NullablePurchaseLineWriteLd) Set(val *PurchaseLineWriteLd) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseLineWriteLd) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseLineWriteLd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseLineWriteLd(val *PurchaseLineWriteLd) *NullablePurchaseLineWriteLd {
	return &NullablePurchaseLineWriteLd{value: val, isSet: true}
}

func (v NullablePurchaseLineWriteLd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseLineWriteLd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
