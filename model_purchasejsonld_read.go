/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfillmentshop

import (
	"encoding/json"
	"time"
)

// PurchasejsonldRead Purchase entity
type PurchasejsonldRead struct {
	JSONContext *string `json:"@context,omitempty"`
	JSONId *string `json:"@id,omitempty"`
	JSONType *string `json:"@type,omitempty"`
	// The purchase channel
	ChannelId int32 `json:"channelId"`
	// The purchase channel reference
	ChannelReference string `json:"channelReference"`
	// The purchase ID
	Id *int32 `json:"id,omitempty"`
	// The purchase name
	Name *string `json:"name,omitempty"`
	// The purchase planned delivery date
	PlannedDate time.Time `json:"plannedDate"`
	// The purchase supplier ID
	SupplierId int32 `json:"supplierId"`
}

// NewPurchasejsonldRead instantiates a new PurchasejsonldRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchasejsonldRead(channelId int32, channelReference string, plannedDate time.Time, supplierId int32, ) *PurchasejsonldRead {
	this := PurchasejsonldRead{}
	this.ChannelId = channelId
	this.ChannelReference = channelReference
	this.PlannedDate = plannedDate
	this.SupplierId = supplierId
	return &this
}

// NewPurchasejsonldReadWithDefaults instantiates a new PurchasejsonldRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchasejsonldReadWithDefaults() *PurchasejsonldRead {
	this := PurchasejsonldRead{}
	return &this
}

// GetJSONContext returns the JSONContext field value if set, zero value otherwise.
func (o *PurchasejsonldRead) GetJSONContext() string {
	if o == nil || o.JSONContext == nil {
		var ret string
		return ret
	}
	return *o.JSONContext
}

// GetJSONContextOk returns a tuple with the JSONContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetJSONContextOk() (*string, bool) {
	if o == nil || o.JSONContext == nil {
		return nil, false
	}
	return o.JSONContext, true
}

// HasJSONContext returns a boolean if a field has been set.
func (o *PurchasejsonldRead) HasJSONContext() bool {
	if o != nil && o.JSONContext != nil {
		return true
	}

	return false
}

// SetJSONContext gets a reference to the given string and assigns it to the JSONContext field.
func (o *PurchasejsonldRead) SetJSONContext(v string) {
	o.JSONContext = &v
}

// GetJSONId returns the JSONId field value if set, zero value otherwise.
func (o *PurchasejsonldRead) GetJSONId() string {
	if o == nil || o.JSONId == nil {
		var ret string
		return ret
	}
	return *o.JSONId
}

// GetJSONIdOk returns a tuple with the JSONId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetJSONIdOk() (*string, bool) {
	if o == nil || o.JSONId == nil {
		return nil, false
	}
	return o.JSONId, true
}

// HasJSONId returns a boolean if a field has been set.
func (o *PurchasejsonldRead) HasJSONId() bool {
	if o != nil && o.JSONId != nil {
		return true
	}

	return false
}

// SetJSONId gets a reference to the given string and assigns it to the JSONId field.
func (o *PurchasejsonldRead) SetJSONId(v string) {
	o.JSONId = &v
}

// GetJSONType returns the JSONType field value if set, zero value otherwise.
func (o *PurchasejsonldRead) GetJSONType() string {
	if o == nil || o.JSONType == nil {
		var ret string
		return ret
	}
	return *o.JSONType
}

// GetJSONTypeOk returns a tuple with the JSONType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetJSONTypeOk() (*string, bool) {
	if o == nil || o.JSONType == nil {
		return nil, false
	}
	return o.JSONType, true
}

// HasJSONType returns a boolean if a field has been set.
func (o *PurchasejsonldRead) HasJSONType() bool {
	if o != nil && o.JSONType != nil {
		return true
	}

	return false
}

// SetJSONType gets a reference to the given string and assigns it to the JSONType field.
func (o *PurchasejsonldRead) SetJSONType(v string) {
	o.JSONType = &v
}

// GetChannelId returns the ChannelId field value
func (o *PurchasejsonldRead) GetChannelId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetChannelIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *PurchasejsonldRead) SetChannelId(v int32) {
	o.ChannelId = v
}

// GetChannelReference returns the ChannelReference field value
func (o *PurchasejsonldRead) GetChannelReference() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ChannelReference
}

// GetChannelReferenceOk returns a tuple with the ChannelReference field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetChannelReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelReference, true
}

// SetChannelReference sets field value
func (o *PurchasejsonldRead) SetChannelReference(v string) {
	o.ChannelReference = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PurchasejsonldRead) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PurchasejsonldRead) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PurchasejsonldRead) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PurchasejsonldRead) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PurchasejsonldRead) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PurchasejsonldRead) SetName(v string) {
	o.Name = &v
}

// GetPlannedDate returns the PlannedDate field value
func (o *PurchasejsonldRead) GetPlannedDate() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlannedDate
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetPlannedDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlannedDate, true
}

// SetPlannedDate sets field value
func (o *PurchasejsonldRead) SetPlannedDate(v time.Time) {
	o.PlannedDate = v
}

// GetSupplierId returns the SupplierId field value
func (o *PurchasejsonldRead) GetSupplierId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SupplierId
}

// GetSupplierIdOk returns a tuple with the SupplierId field value
// and a boolean to check if the value has been set.
func (o *PurchasejsonldRead) GetSupplierIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupplierId, true
}

// SetSupplierId sets field value
func (o *PurchasejsonldRead) SetSupplierId(v int32) {
	o.SupplierId = v
}

func (o PurchasejsonldRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JSONContext != nil {
		toSerialize["@context"] = o.JSONContext
	}
	if o.JSONId != nil {
		toSerialize["@id"] = o.JSONId
	}
	if o.JSONType != nil {
		toSerialize["@type"] = o.JSONType
	}
	if true {
		toSerialize["channelId"] = o.ChannelId
	}
	if true {
		toSerialize["channelReference"] = o.ChannelReference
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["plannedDate"] = o.PlannedDate
	}
	if true {
		toSerialize["supplierId"] = o.SupplierId
	}
	return json.Marshal(toSerialize)
}

type NullablePurchasejsonldRead struct {
	value *PurchasejsonldRead
	isSet bool
}

func (v NullablePurchasejsonldRead) Get() *PurchasejsonldRead {
	return v.value
}

func (v *NullablePurchasejsonldRead) Set(val *PurchasejsonldRead) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasejsonldRead) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasejsonldRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasejsonldRead(val *PurchasejsonldRead) *NullablePurchasejsonldRead {
	return &NullablePurchasejsonldRead{value: val, isSet: true}
}

func (v NullablePurchasejsonldRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchasejsonldRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


