/*
 * E-fulfilment Shop API
 *
 * The E-fulfilment Shop API allows you to integrate your service with our warehouse.
 *
 * API version: 1.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package efulfillment_go

import (
	"encoding/json"
)

// SaleLineRead Sale Line entity
type SaleLineRead struct {
	// The sale line description
	Description string `json:"description"`
	// The sale line ID
	Id *int32 `json:"id,omitempty"`
	// The product ID
	ProductId int32 `json:"productId"`
	// The sale line quantity
	Quantity int32 `json:"quantity"`
	// The sale line quantity delivered
	QuantityDelivered *int32 `json:"quantityDelivered,omitempty"`
	// The sale ID
	SaleId int32 `json:"saleId"`
}

// NewSaleLineRead instantiates a new SaleLineRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaleLineRead(description string, productId int32, quantity int32, saleId int32, ) *SaleLineRead {
	this := SaleLineRead{}
	this.Description = description
	this.ProductId = productId
	this.Quantity = quantity
	this.SaleId = saleId
	return &this
}

// NewSaleLineReadWithDefaults instantiates a new SaleLineRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaleLineReadWithDefaults() *SaleLineRead {
	this := SaleLineRead{}
	return &this
}

// GetDescription returns the Description field value
func (o *SaleLineRead) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SaleLineRead) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SaleLineRead) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SaleLineRead) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleLineRead) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SaleLineRead) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SaleLineRead) SetId(v int32) {
	o.Id = &v
}

// GetProductId returns the ProductId field value
func (o *SaleLineRead) GetProductId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *SaleLineRead) GetProductIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *SaleLineRead) SetProductId(v int32) {
	o.ProductId = v
}

// GetQuantity returns the Quantity field value
func (o *SaleLineRead) GetQuantity() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *SaleLineRead) GetQuantityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *SaleLineRead) SetQuantity(v int32) {
	o.Quantity = v
}

// GetQuantityDelivered returns the QuantityDelivered field value if set, zero value otherwise.
func (o *SaleLineRead) GetQuantityDelivered() int32 {
	if o == nil || o.QuantityDelivered == nil {
		var ret int32
		return ret
	}
	return *o.QuantityDelivered
}

// GetQuantityDeliveredOk returns a tuple with the QuantityDelivered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleLineRead) GetQuantityDeliveredOk() (*int32, bool) {
	if o == nil || o.QuantityDelivered == nil {
		return nil, false
	}
	return o.QuantityDelivered, true
}

// HasQuantityDelivered returns a boolean if a field has been set.
func (o *SaleLineRead) HasQuantityDelivered() bool {
	if o != nil && o.QuantityDelivered != nil {
		return true
	}

	return false
}

// SetQuantityDelivered gets a reference to the given int32 and assigns it to the QuantityDelivered field.
func (o *SaleLineRead) SetQuantityDelivered(v int32) {
	o.QuantityDelivered = &v
}

// GetSaleId returns the SaleId field value
func (o *SaleLineRead) GetSaleId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SaleId
}

// GetSaleIdOk returns a tuple with the SaleId field value
// and a boolean to check if the value has been set.
func (o *SaleLineRead) GetSaleIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SaleId, true
}

// SetSaleId sets field value
func (o *SaleLineRead) SetSaleId(v int32) {
	o.SaleId = v
}

func (o SaleLineRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["productId"] = o.ProductId
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	if o.QuantityDelivered != nil {
		toSerialize["quantityDelivered"] = o.QuantityDelivered
	}
	if true {
		toSerialize["saleId"] = o.SaleId
	}
	return json.Marshal(toSerialize)
}

type NullableSaleLineRead struct {
	value *SaleLineRead
	isSet bool
}

func (v NullableSaleLineRead) Get() *SaleLineRead {
	return v.value
}

func (v *NullableSaleLineRead) Set(val *SaleLineRead) {
	v.value = val
	v.isSet = true
}

func (v NullableSaleLineRead) IsSet() bool {
	return v.isSet
}

func (v *NullableSaleLineRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaleLineRead(val *SaleLineRead) *NullableSaleLineRead {
	return &NullableSaleLineRead{value: val, isSet: true}
}

func (v NullableSaleLineRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaleLineRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


